""" General
" load filetype settings, plugins and maps
filetype plugin indent on
syntax on

" allow buffers to have changes without being displayed
set hidden
set number relativenumber
"set number
set signcolumn=number
set cursorline

set scrolloff=5
set backspace=indent,eol,start  "backspace over anything
set ttimeout ttimeoutlen=30     "timeout on keycodes

set virtualedit=block,onemore   "move past end of line in v-block mode and 1 past end of line in normal mode

" cmd
set showcmd
set cmdheight=2
set shortmess-=S

" reload file when edited outside vim
set autoread

set confirm

" enable project-specific vimrc
set exrc
set secure

""" Filetype
let g:filetype_pl = "prolog"
let g:tex_flavor = "latex"
let g:markdown_fenced_languages = ['python', 'c', 'cpp']

""" OS
if !exists("g:os")
    if has("win32") || has("win64")
        let g:os = "Windows"
    elseif has("unix")
        let g:os = "Linux"
    else
        let g:os = ""
    endif
endif

""" Plugins
if g:os == "Linux"
    " Install vim-plug if not found
    let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
    if empty(glob(data_dir . '/autoload/plug.vim'))
        silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
        autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    endif

    " Run PlugInstall if there are missing plugins
    autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
        \| PlugInstall --sync | source $MYVIMRC
    \| endif
endif

if exists("$VIRTUAL_ENV")
    let g:python3_host_prog=substitute(system("which -a python3 | head -n2 | tail -n1"), "\n", '', 'g')
else
    let g:python3_host_prog=substitute(system("which python3"), "\n", '', 'g')
endif

let g:ale_disable_lsp = 1

if !has('nvim')
    call plug#begin('~/.vim/vim_plug')

    Plug 'romainl/vim-cool'
    Plug 'romainl/vim-qf'
    Plug 'tpope/vim-abolish'
    "Plug 'ludovicchabant/vim-gutentags'
    Plug 'arcticicestudio/nord-vim'
    Plug 'dense-analysis/ale'

    call plug#end()

    let g:gutentags_ctags_tagfile = '.tags'
    let g:gutentags_project_root = ['.tags']
    let g:gutentags_add_default_project_roots = 0
    let g:gutentags_add_ctrlp_root_markers = 0
    set tags=./.tags;,.tags;
endif

let g:ale_echo_msg_format = '%linter%: %s'


""" Wildmenu
set wildmenu                    " Use wildmenu
set wildmode=list:longest,full  " Tab press completes longest common match and lists, second press cycles
set wildignorecase              " Case insensitive, if supported
set wildcharm=<C-z>

""" Indent & Whitespace
set autoindent               " Use indent of previous line on new lines
set expandtab                " Use spaces instead of tabs
set shiftwidth=4             " Indent with four spaces
set softtabstop=4            " Insert four spaces with tab key
set breakindent              " Indent wrapped lines
"set breakindentopt=shift:2   " Indent wrapped lines slightly more
set breakindent showbreak=>\ 
set linebreak                " Break at word boundaries

set shiftround
set smarttab

" show trailing spaces
set list
"set listchars=tab:\ \ ,trail:·
set listchars=tab:>\ ,trail:·,extends:>,precedes:<

""" History, Swap, Undo, Backup
set history=300

set backup
set undofile
" keep swap, backup and undo files in dedicated directory
" // expands to file's full path
if g:os == "Linux"
    let s:version = 'vim'
    if has('nvim')
        let s:version = 'nvim'
    endif

    let s:directory = $XDG_STATE_HOME."/".s:version."/swap"
    if !isdirectory(s:directory)
        call mkdir(s:directory, "p", 0700)
    endif
    let &directory=s:directory.",/var/tmp,/tmp"

    let s:directory = $XDG_STATE_HOME."/".s:version."/backup"
    if !isdirectory(s:directory)
        call mkdir(s:directory, "p", 0700)
    endif
    let &backupdir=s:directory

    let s:directory = $XDG_STATE_HOME."/".s:version."/undo"
    if !isdirectory(s:directory)
        call mkdir(s:directory, "p", 0700)
    endif
    let &undodir=s:directory

    " no undo or backup files for files in /tmp
    au BufWritePre /tmp/* setlocal noundofile nobackup nowritebackup
else
    set directory^=~/vimfiles/cache/swap//
    set backupdir^=~/vimfiles/cache/backup//
    set undodir^=~/vimfiles/cache/undo//
endif

""" Path
" set path in filetype specific settings
set path-=/usr/include

""" Completion
set completeopt=                "control completion menu
set completeopt+=longest        "match longest common text
set completeopt+=menuone        "show menu even if there's only 1 match

"enter to select highlighted menu item
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

"simulate <Down> to keep a menu item highlighted when using <C-N>
inoremap <expr> <C-n> pumvisible() ? '<C-n>' :
  \ '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'

"simulate <Up> to keep a menu item highlighted when using <C-P>
inoremap <expr> <C-p> pumvisible() ? '<C-p>' :
  \ '<C-p><C-r>=pumvisible() ? "\<lt>Up>" : ""<CR>'


""" Search
set hlsearch
set ignorecase
set incsearch

if executable('rg')
    set grepprg=rg\ -S\ --vimgrep
    set grepformat=%f:%l:%c:%m
endif

""" Fold
set foldenable
set modeline
set modelineexpr

""" Colorscheme + Font
if !has('nvim')
    colorscheme nord
endif
set bg=dark
if g:os == "Linux"
    set guifont=Fira_Code_Medium:h11
elseif g:os == "Windows"
    set guifont=Consolas:h11
endif

""" GUI
set guioptions-=m "menu bar
set guioptions-=T "toolbar
set guioptions-=r "scrollbar

""" Statusline
set laststatus=2

""" netrw
let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_winsize = 20
let g:netrw_dirhistmax=0

""" Keybindings
" use leader for buffer/pane operations
let mapleader = ","
let maplocalleader = "\<Space>"
" toggle folds with <space><space>
"nnoremap <silent> <localleader><Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
"vnoremap <localleader><space> zf
nnoremap <localleader><space> <C-^>
nmap <localleader><backspace> <Plug>(qf_qf_switch)

nnoremap U <C-R>
nnoremap Y y$
nnoremap Q gQ

" expand %% in command mode to current file path
"cnoremap %% <C-R>=fnameescape(expand('%:h')).'/'<CR>

" search recursively for edit and find
"nnoremap <leader>e :e **/*<C-z>**/*
"nmap <leader>e :e %%<C-z><S-Tab>
nnoremap <leader>e :e <C-R>=fnameescape(expand('%:h')).'/'<CR><C-z>

" cd to current file path for current window
nnoremap <leader>cd :lcd %:h<CR>

" list loaded buffers and populate prompt
nnoremap gb :ls<CR>:b<Space>

" don't add { and } motions to jumplist
nnoremap <silent> } :<C-u>execute "keepjumps norm! " . v:count1 . "}"<CR>
nnoremap <silent> { :<C-u>execute "keepjumps norm! " . v:count1 . "{"<CR>

" Cycle through argument list
nnoremap [a :previous<CR>
nnoremap ]a :next<CR>
" Cycle through buffers
nnoremap [b :bprevious<CR>
nnoremap ]b :bnext<CR>
" Cycle through quicklist/:helpgrep items
"nnoremap [c :cprevious<CR>
"nnoremap ]c :cnext<CR>
nmap [c <Plug>(qf_qf_previous)
nmap ]c  <Plug>(qf_qf_next)
" Cycle through location list items
"nnoremap [l :lprevious<CR>
"nnoremap ]l :lnext<CR>
nmap [l <Plug>(qf_loc_previous)
nmap ]l  <Plug>(qf_loc_next)

nnoremap <localleader>y :%y+<CR>

"" vim:fdm=expr:fdl=0
"" vim:fde=getline(v\:lnum)=~'^""'?'>'.(matchend(getline(v\:lnum),'""*')-2)\:'='

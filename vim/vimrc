""" General
" load filetype settings, plugins and maps
filetype plugin indent on
syntax on

" allow buffers to have changes without being displayed
set hidden                      
set number relativenumber

set scrolloff=15
set backspace=indent,eol,start  "backspace over anything
set ttimeout ttimeoutlen=30     "timeout on keycodes

set virtualedit=block,onemore   "move past end of line in v-block mode and 1 past end of line in normal mode

" cmd
set showcmd
set cmdheight=2

set autoread

"set exrc
"set secure

""" Wildmenu
set wildmenu                    " Use wildmenu
set wildmode=list:longest,full  " Tab press completes longest common match and lists, second press cycles
set wildignorecase              " Case insensitive, if supported
set wildcharm=<C-z>

""" Indent
set autoindent     " Use indent of previous line on new lines
set expandtab      " Use spaces instead of tabs
set shiftwidth=4   " Indent with four spaces
set softtabstop=4  " Insert four spaces with tab key
set breakindent    " Indent wrapped lines

""" Fold
set foldenable
set modeline
set modelineexpr

""" OS
if !exists("g:os")
    if has("win32") || has("win64")
        let g:os = "Windows"
    elseif has("unix")
        let g:os = "Linux"
    else
        let g:os = ""
    endif
endif

""" Special file locations
set backup
set undofile
" keep swap, backup and undo files in dedicated directory
" // expands to file's full path
if g:os == "Linux"
    set directory^=~/.vim/cache/swap//
    set backupdir^=~/.vim/cache/backup//
    set undodir^=~/.vim/cache/undo//
else
    set directory^=~/vimfiles/cache/swap//
    set backupdir^=~/vimfiles/cache/backup//
    set undodir^=~/vimfiles/cache/undo//
endif

""" Path
set path-=/usr/include

""" Completion
set completeopt=                "control completion menu
set completeopt+=longest        "match longest common text
set completeopt+=menuone        "show menu even if there's only 1 match

"enter to select highlighted menu item
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

"simulate <Down> to keep a menu item highlighted when using <C-N>
inoremap <expr> <C-n> pumvisible() ? '<C-n>' :
  \ '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'

"simulate <Up> to keep a menu item highlighted when using <C-P>
inoremap <expr> <C-p> pumvisible() ? '<C-p>' :
  \ '<C-p><C-r>=pumvisible() ? "\<lt>Up>" : ""<CR>'


""" Search
set hlsearch
set ignorecase
set incsearch

augroup SearchHighlight
    autocmd!
    autocmd CursorMoved * call HlSearch()
    autocmd InsertEnter * call StopHL()
augroup END


""" Colorscheme + Font
colorscheme gruvbox
set bg=dark
if g:os == "Linux"
    set guifont=Fira_Code_Light:h11
elseif g:os == "Windows"
    set guifont=Consolas:h11
endif

""" GUI
set guioptions-=m "menu bar
set guioptions-=T "toolbar
set guioptions-=r "scrollbar

""" Statusline
set laststatus=2

""" netrw
let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_winsize = 20

""" Keybindings
let mapleader = "\<space>"
" toggle folds with <space><space>
nnoremap <silent> <leader><Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
vnoremap <leader><space> zf

nnoremap U <C-R>
nnoremap Y y$
nnoremap Q gQ

" search recursively for edit and find
nnoremap ,e :e **/*<C-z>**/*
nnoremap ,f :find **/*
nnoremap ,n :next **/*<C-z>**/*

" list loaded buffers and populate prompt
nnoremap gb :ls<CR>:b<Space>

" Cycle through argument list
nnoremap [a :previous<CR>
nnoremap ]a :next<CR>
" Cycle through buffers
nnoremap [b :bprevious<CR>
nnoremap ]b :bnext<CR>
" Cycle through quicklist/:helpgrep items
nnoremap [c :cprevious<CR>
nnoremap ]c :cnext<CR>
" Cycle through location list items
nnoremap [l :lprevious<CR>
nnoremap ]l :lnext<CR>

nnoremap <leader>vimrc :e $MYVIMRC<CR>
nnoremap <leader>y :%y+<CR>

""" Plugins
" SyntaxComplete
"if has("autocmd") && exists("+omnifunc")
"autocmd Filetype *
"    \ if &omnifunc == "" |
"    \ setlocal omnifunc=syntaxcomplete#Complete |
"    \ endif
"    endif

if g:os == "Linux"
    if empty(glob('~/.vim/autoload/plug.vim'))
      silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
      autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    endif
endif

call plug#begin('~/.vim/vim_plug')

Plug 'ludovicchabant/vim-gutentags'
Plug 'dense-analysis/ale'
Plug 'OmniSharp/omnisharp-vim', { 'for': 'cs' }

call plug#end()

let g:ale_linters = {
\ 'cs': ['OmniSharp']
\}


"" vim:fdm=expr:fdl=0
"" vim:fde=getline(v\:lnum)=~'^""'?'>'.(matchend(getline(v\:lnum),'""*')-2)\:'='
